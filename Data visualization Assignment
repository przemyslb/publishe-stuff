---
title: "ASSIGNMENT MARKDOWN"
author: "przemek bednarz"
date: "12/12/2019"
output: word_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(include = FALSE)
library(readr)
library(dplyr)
library(purrr)
library(ggplot2)
library(sqldf)
library(gsubfn)
library(proto)
library(RSQLite)
library(sp)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
## Fix for unreadable numbers
options(scipen = 999)
#load dataset
livestock <- read.csv("~/FAOSTAT_data_11-30-2019.csv")
# remove columns
livestock$Flag<- NULL
livestock$Flag.Description <- NULL
livestock$Year.Code <- NULL
livestock$Item.Code <- NULL
livestock$Element.Code <- NULL
livestock$Area.Code <- NULL
livestock$Domain <- NULL
livestock$Domain.Code <- NULL
#here I deal  with duplicated being in different measuring unit
livestock <- livestock[livestock$Element == "Production",]

#View(livestock)
livestock$Item <- as.character(livestock$Item)
livestock$Element <- as.character(livestock$Element)
livestock$Value <- as.numeric(livestock$Value)
livestock$Year <- as.numeric(livestock$Year)

#omit empty values
livestock <- na.omit(livestock)
unique(livestock$Item )
unique(livestock$Element )
#stats
colnames(livestock)
#nrow(livestock)
str(livestock)
#View(livestock)

```
HISTOGRAM FOR IMPORTANT COLUMNS.
```{r pressure, echo=FALSE}
histogram <- livestock$Value
hist(histogram, breaks=5, main="With breaks=4", xlim=c(-10,100),col="red",ylim=c(0,25))+
  geom_bar(stat = 'identity',fill = 'blue')
hist(histogram)
ddd <- livestock$Year
```
## Including Plots

You can also embed plots, for example:

```{r, echo=FALSE}
#-------------------------------------------------------------------
population <- read.csv("~/world-population-by-world-regions-post-1820.csv")
#change column to numeric
population$Year <- as.numeric(population$Year)
# remove columns
population$Code <- NULL
#omit emtpy values
population <- na.omit(population)
# Rename Entity column in second dataset
colnames(population)[colnames(population)=="Entity"] <- "Area"
#colnames(population)
population$Area <- as.character(population$Area)
#View(population)
str(population)
#unique( population$Year )
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
You can also embed plots, for example:

Filter years
```{r, echo=FALSE}
#filter out years
population <- population[population$Year >= "1961",]
population <- population[population$Year <= "2017",]
population <- population[population$Year != "200",]
population
#check if only the right years were loaded
#Check if years loaded properly 
unique(population$Year)




#total world population across the years
total_population <- population %>%
  group_by(Year) %>%
  summarize(population_sum = sum(Population))
total_population
p1 <- ggplot() + geom_line(aes(y = population_sum, x = Year),
                 data = total_population)
p1
population_uk<-population %>%
  filter(Area=="United Kingdom") 
population_uk
#total population in UK across the years
total_population_uk <- population_uk %>%
  group_by(Year) %>%
  summarize(population_sum_uk = sum(Population))
total_population_uk
total_population
p2 <- ggplot() + geom_line(aes(y = population_sum_uk, x = Year),
                 data = total_population_uk)
p2


population_germany<-population %>%
  filter(Area=="Germany") 
population_germany
#total population in UK across the years
total_population_germany <- population_germany %>%
  group_by(Year) %>%
  summarize(population_sum_germany = sum(Population))
total_population_germany
total_population
pgermany <- ggplot() + geom_line(aes(y = population_sum_germany, x = Year),
                 data = total_population_germany)
pgermany

population_poland<-population %>%
  filter(Area=="Poland") 
population_germany
#total population in UK across the years
total_population_poland <- population_poland %>%
  group_by(Year) %>%
  summarize(population_sum_poland = sum(Population))
total_population_poland
total_population
ppoland <- ggplot() + geom_line(aes(y = population_sum_poland, x = Year),
                 data = total_population_poland)
ppoland

#compare population growth in different countries
population_compared<-population %>%
  filter(Area=="Germany"| Area=="France"| Area=="Spain") 
population_compared
unique(population_compared$Area)

#FINAL INSIGHTS, COUNTRIES MAY BE CHANGED LATER, CHART WILL BE UPGRAEDED TO LOOK NICER
# plot, using the aesthetics argument 'colour'
ggplot(data = population_compared, aes(x = Year, y = Population, colour = Area)) + geom_line()

```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
You can also embed plots, for example:

```{r pressure, echo=FALSE}
FAOdataset<-merge(livestock, population)
FAOdataset
colnames(FAOdataset)
nrow(FAOdataset)
str(FAOdataset)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
You can also embed plots, for example:

```{r, echo=FALSE}
 #production of different items compared




b<-ggplot(livestock) + geom_line(aes(x=Year, y=Value, colour=Item)) +
  facet_wrap(~Item) +
  guides(col=guide_legend(ncol=1))
b


#teraz musisz zrobic osobno do eggs, meats together i wool osobno.
#separate for eggs
#meats together
#Wool




#Eggs 
eggs_production<-livestock %>%
  filter(Item=="Eggs, hen, in shell (number)") 
eggs_production
#total population in UK across the years
total_eggs <- eggs_production %>%
  group_by(Year) %>%
  summarize(eggs_sum = sum(Value))
total_eggs

p3 <- ggplot() + geom_line(aes(y = eggs_sum, x = Year),
                 data = total_eggs)
p3




```


```{r pressure, echo=FALSE}
#Egg production
eggs_production<-FAOdataset %>%
  filter(Item=="Eggs, hen, in shell (number)") 
eggs_production

#total population in UK across the years
total_eggs <- eggs_production %>%
  group_by(Year) %>%
  summarize(eggs_sum = sum(Value))
total_eggs

p3 <- ggplot() + geom_line(aes(y = eggs_sum, x = Year),
                 data = total_eggs)
p3



#This is meat production (selected only, camel meat of no interest for us) 

#lets filter out what we do not want
#ireland meet production and below milk production
ireland_food_prod<-FAOdataset %>%
  filter(Item=="Meat, pig" | Item=="Meat, chicken")
ireland_food_prod %>%
  filter(Area=="Germany")
ireland_food_prod
germany_grid<-ggplot(ireland_food_prod) + geom_line(aes(x=Year, y=Value, colour=Item)) +
  facet_wrap(~Item) +
  guides(col=guide_legend(ncol=1))
germany_grid
ireland_food_prod
# plot, using the aesthetics argument 'colour'
ggplot(data = ireland_food_prod, aes(x = Year, y = Value, colour = Item)) + geom_line()




#sum
total_ireland_sum <- ireland_food_prod %>%
  group_by(Year) %>%
  summarize(mean_ireland_sum = sum(Value))
total_ireland_sum

# Basic density plot
qplot(Year, data = total_ireland_sum, geom = "Value")
# Change density plot line color by group (sex)
# change line type
qplot(Year, data = ireland_food_prod, geom = "Value",
    color = Item, linetype = Item)


#plotting irish production of meat
total_eggs <- eggs_production %>%
  group_by(Year) %>%
  summarize(eggs_sum = sum(Value))
total_eggs

p3 <- ggplot() + geom_line(aes(y = eggs_sum, x = Year),
                 data = total_eggs)
p3



#plotting irish production of milk
ireland_milk_prod<-FAOdataset %>%
  filter(Item=="Milk, whole fresh cow")
ireland_milk_prod %>%
  filter(Area=="Ireland")
ireland_milk_prod
total_milk <- ireland_milk_prod %>%
  group_by(Year) %>%
  summarize(milk_sum = sum(Value))
total_eggs

milk <- ggplot() + geom_line(aes(y = milk_sum, x = Year),
                 data = total_milk)
milk


p1 <- ggplot(data = studentresults_oral, aes(x = Name, y = average_mark_oral)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  geom_text(aes(y = average_mark_oral, label = average_mark_oral))
p1




#total population in UK across the years
total_eggs <- eggs_production %>%
  group_by(Year) %>%
  summarize(eggs_sum = sum(Value))
total_eggs

p3 <- ggplot() + geom_line(aes(y = eggs_sum, x = Year),
                 data = total_eggs)
p3
```




livestock %>% 
  group_by(Year) %>% 
  summarise(value=sum(Value)) %>% 
  ungroup
plot2<-ggplot(aes(Year, Value, colour=Item)) +
  geom_line() +
  geom_point()


# Plot relationship between age and results for mark oral with colors
scatter2 <- ggplot(livestock, aes(x=livestock$Year,y=livestock$Value, color=livestock$Item))+
  geom_point() +
  stat_smooth(method = 'lm', se= FALSE)+
  labs(title = 'Scatter Plot #2 - Age vs Written Marks by Subject', x = 'Year', y = 'Value')
scatter2
```



Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
